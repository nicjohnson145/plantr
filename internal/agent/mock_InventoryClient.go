// Code generated by mockery. DO NOT EDIT.

package agent

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockInventoryClient is an autogenerated mock type for the InventoryClient type
type MockInventoryClient struct {
	mock.Mock
}

type MockInventoryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInventoryClient) EXPECT() *MockInventoryClient_Expecter {
	return &MockInventoryClient_Expecter{mock: &_m.Mock}
}

// GetRow provides a mock function with given fields: ctx, hash
func (_m *MockInventoryClient) GetRow(ctx context.Context, hash string) (*InventoryRow, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetRow")
	}

	var r0 *InventoryRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*InventoryRow, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *InventoryRow); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InventoryRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInventoryClient_GetRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRow'
type MockInventoryClient_GetRow_Call struct {
	*mock.Call
}

// GetRow is a helper method to define mock.On call
//   - ctx context.Context
//   - hash string
func (_e *MockInventoryClient_Expecter) GetRow(ctx interface{}, hash interface{}) *MockInventoryClient_GetRow_Call {
	return &MockInventoryClient_GetRow_Call{Call: _e.mock.On("GetRow", ctx, hash)}
}

func (_c *MockInventoryClient_GetRow_Call) Run(run func(ctx context.Context, hash string)) *MockInventoryClient_GetRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInventoryClient_GetRow_Call) Return(_a0 *InventoryRow, _a1 error) *MockInventoryClient_GetRow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInventoryClient_GetRow_Call) RunAndReturn(run func(context.Context, string) (*InventoryRow, error)) *MockInventoryClient_GetRow_Call {
	_c.Call.Return(run)
	return _c
}

// WriteRow provides a mock function with given fields: ctx, row
func (_m *MockInventoryClient) WriteRow(ctx context.Context, row InventoryRow) error {
	ret := _m.Called(ctx, row)

	if len(ret) == 0 {
		panic("no return value specified for WriteRow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, InventoryRow) error); ok {
		r0 = rf(ctx, row)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInventoryClient_WriteRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteRow'
type MockInventoryClient_WriteRow_Call struct {
	*mock.Call
}

// WriteRow is a helper method to define mock.On call
//   - ctx context.Context
//   - row InventoryRow
func (_e *MockInventoryClient_Expecter) WriteRow(ctx interface{}, row interface{}) *MockInventoryClient_WriteRow_Call {
	return &MockInventoryClient_WriteRow_Call{Call: _e.mock.On("WriteRow", ctx, row)}
}

func (_c *MockInventoryClient_WriteRow_Call) Run(run func(ctx context.Context, row InventoryRow)) *MockInventoryClient_WriteRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(InventoryRow))
	})
	return _c
}

func (_c *MockInventoryClient_WriteRow_Call) Return(_a0 error) *MockInventoryClient_WriteRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInventoryClient_WriteRow_Call) RunAndReturn(run func(context.Context, InventoryRow) error) *MockInventoryClient_WriteRow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInventoryClient creates a new instance of MockInventoryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInventoryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInventoryClient {
	mock := &MockInventoryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
