// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package storage

import (
	"fmt"
	"strings"
)

const (
	// StorageKindSqlite is a StorageKind of type sqlite.
	StorageKindSqlite StorageKind = "sqlite"
)

var ErrInvalidStorageKind = fmt.Errorf("not a valid StorageKind, try [%s]", strings.Join(_StorageKindNames, ", "))

var _StorageKindNames = []string{
	string(StorageKindSqlite),
}

// StorageKindNames returns a list of possible string values of StorageKind.
func StorageKindNames() []string {
	tmp := make([]string, len(_StorageKindNames))
	copy(tmp, _StorageKindNames)
	return tmp
}

// String implements the Stringer interface.
func (x StorageKind) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StorageKind) IsValid() bool {
	_, err := ParseStorageKind(string(x))
	return err == nil
}

var _StorageKindValue = map[string]StorageKind{
	"sqlite": StorageKindSqlite,
}

// ParseStorageKind attempts to convert a string to a StorageKind.
func ParseStorageKind(name string) (StorageKind, error) {
	if x, ok := _StorageKindValue[name]; ok {
		return x, nil
	}
	return StorageKind(""), fmt.Errorf("%s is %w", name, ErrInvalidStorageKind)
}

// MarshalText implements the text marshaller method.
func (x StorageKind) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *StorageKind) UnmarshalText(text []byte) error {
	tmp, err := ParseStorageKind(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
