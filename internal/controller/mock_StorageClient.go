// Code generated by mockery. DO NOT EDIT.

package controller

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStorageClient is an autogenerated mock type for the StorageClient type
type MockStorageClient struct {
	mock.Mock
}

type MockStorageClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageClient) EXPECT() *MockStorageClient_Expecter {
	return &MockStorageClient_Expecter{mock: &_m.Mock}
}

// ReadChallenge provides a mock function with given fields: ctx, id
func (_m *MockStorageClient) ReadChallenge(ctx context.Context, id string) (*Challenge, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ReadChallenge")
	}

	var r0 *Challenge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Challenge, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Challenge); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Challenge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageClient_ReadChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadChallenge'
type MockStorageClient_ReadChallenge_Call struct {
	*mock.Call
}

// ReadChallenge is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStorageClient_Expecter) ReadChallenge(ctx interface{}, id interface{}) *MockStorageClient_ReadChallenge_Call {
	return &MockStorageClient_ReadChallenge_Call{Call: _e.mock.On("ReadChallenge", ctx, id)}
}

func (_c *MockStorageClient_ReadChallenge_Call) Run(run func(ctx context.Context, id string)) *MockStorageClient_ReadChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorageClient_ReadChallenge_Call) Return(_a0 *Challenge, _a1 error) *MockStorageClient_ReadChallenge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageClient_ReadChallenge_Call) RunAndReturn(run func(context.Context, string) (*Challenge, error)) *MockStorageClient_ReadChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// ReadGithubRelease provides a mock function with given fields: ctx, release
func (_m *MockStorageClient) ReadGithubRelease(ctx context.Context, release *GithubRelease) (string, error) {
	ret := _m.Called(ctx, release)

	if len(ret) == 0 {
		panic("no return value specified for ReadGithubRelease")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GithubRelease) (string, error)); ok {
		return rf(ctx, release)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GithubRelease) string); ok {
		r0 = rf(ctx, release)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GithubRelease) error); ok {
		r1 = rf(ctx, release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageClient_ReadGithubRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadGithubRelease'
type MockStorageClient_ReadGithubRelease_Call struct {
	*mock.Call
}

// ReadGithubRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - release *GithubRelease
func (_e *MockStorageClient_Expecter) ReadGithubRelease(ctx interface{}, release interface{}) *MockStorageClient_ReadGithubRelease_Call {
	return &MockStorageClient_ReadGithubRelease_Call{Call: _e.mock.On("ReadGithubRelease", ctx, release)}
}

func (_c *MockStorageClient_ReadGithubRelease_Call) Run(run func(ctx context.Context, release *GithubRelease)) *MockStorageClient_ReadGithubRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GithubRelease))
	})
	return _c
}

func (_c *MockStorageClient_ReadGithubRelease_Call) Return(_a0 string, _a1 error) *MockStorageClient_ReadGithubRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageClient_ReadGithubRelease_Call) RunAndReturn(run func(context.Context, *GithubRelease) (string, error)) *MockStorageClient_ReadGithubRelease_Call {
	_c.Call.Return(run)
	return _c
}

// WriteChallenge provides a mock function with given fields: ctx, challenge
func (_m *MockStorageClient) WriteChallenge(ctx context.Context, challenge *Challenge) error {
	ret := _m.Called(ctx, challenge)

	if len(ret) == 0 {
		panic("no return value specified for WriteChallenge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Challenge) error); ok {
		r0 = rf(ctx, challenge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorageClient_WriteChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteChallenge'
type MockStorageClient_WriteChallenge_Call struct {
	*mock.Call
}

// WriteChallenge is a helper method to define mock.On call
//   - ctx context.Context
//   - challenge *Challenge
func (_e *MockStorageClient_Expecter) WriteChallenge(ctx interface{}, challenge interface{}) *MockStorageClient_WriteChallenge_Call {
	return &MockStorageClient_WriteChallenge_Call{Call: _e.mock.On("WriteChallenge", ctx, challenge)}
}

func (_c *MockStorageClient_WriteChallenge_Call) Run(run func(ctx context.Context, challenge *Challenge)) *MockStorageClient_WriteChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Challenge))
	})
	return _c
}

func (_c *MockStorageClient_WriteChallenge_Call) Return(_a0 error) *MockStorageClient_WriteChallenge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageClient_WriteChallenge_Call) RunAndReturn(run func(context.Context, *Challenge) error) *MockStorageClient_WriteChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// WriteGithubRelease provides a mock function with given fields: ctx, release
func (_m *MockStorageClient) WriteGithubRelease(ctx context.Context, release *GithubRelease) error {
	ret := _m.Called(ctx, release)

	if len(ret) == 0 {
		panic("no return value specified for WriteGithubRelease")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *GithubRelease) error); ok {
		r0 = rf(ctx, release)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorageClient_WriteGithubRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteGithubRelease'
type MockStorageClient_WriteGithubRelease_Call struct {
	*mock.Call
}

// WriteGithubRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - release *GithubRelease
func (_e *MockStorageClient_Expecter) WriteGithubRelease(ctx interface{}, release interface{}) *MockStorageClient_WriteGithubRelease_Call {
	return &MockStorageClient_WriteGithubRelease_Call{Call: _e.mock.On("WriteGithubRelease", ctx, release)}
}

func (_c *MockStorageClient_WriteGithubRelease_Call) Run(run func(ctx context.Context, release *GithubRelease)) *MockStorageClient_WriteGithubRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GithubRelease))
	})
	return _c
}

func (_c *MockStorageClient_WriteGithubRelease_Call) Return(_a0 error) *MockStorageClient_WriteGithubRelease_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageClient_WriteGithubRelease_Call) RunAndReturn(run func(context.Context, *GithubRelease) error) *MockStorageClient_WriteGithubRelease_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorageClient creates a new instance of MockStorageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageClient {
	mock := &MockStorageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
