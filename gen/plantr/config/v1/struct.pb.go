// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: plantr/config/v1/struct.proto

package configv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfigFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *ConfigFile) Reset() {
	*x = ConfigFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantr_config_v1_struct_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFile) ProtoMessage() {}

func (x *ConfigFile) ProtoReflect() protoreflect.Message {
	mi := &file_plantr_config_v1_struct_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFile.ProtoReflect.Descriptor instead.
func (*ConfigFile) Descriptor() ([]byte, []int) {
	return file_plantr_config_v1_struct_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ConfigFile) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type GithubRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo           string                      `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	AssetPatterns  *GithubRelease_AssetPattern `protobuf:"bytes,2,opt,name=asset_patterns,json=assetPatterns,proto3" json:"asset_patterns,omitempty"`
	Tag            string                      `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	NameOverride   *string                     `protobuf:"bytes,4,opt,name=name_override,json=nameOverride,proto3,oneof" json:"name_override,omitempty"`
	ArchiveRelease bool                        `protobuf:"varint,5,opt,name=archive_release,json=archiveRelease,proto3" json:"archive_release,omitempty"`
}

func (x *GithubRelease) Reset() {
	*x = GithubRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantr_config_v1_struct_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRelease) ProtoMessage() {}

func (x *GithubRelease) ProtoReflect() protoreflect.Message {
	mi := &file_plantr_config_v1_struct_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRelease.ProtoReflect.Descriptor instead.
func (*GithubRelease) Descriptor() ([]byte, []int) {
	return file_plantr_config_v1_struct_proto_rawDescGZIP(), []int{1}
}

func (x *GithubRelease) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GithubRelease) GetAssetPatterns() *GithubRelease_AssetPattern {
	if x != nil {
		return x.AssetPatterns
	}
	return nil
}

func (x *GithubRelease) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *GithubRelease) GetNameOverride() string {
	if x != nil && x.NameOverride != nil {
		return *x.NameOverride
	}
	return ""
}

func (x *GithubRelease) GetArchiveRelease() bool {
	if x != nil {
		return x.ArchiveRelease
	}
	return false
}

type SystemPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apt *SystemPackage_Apt `protobuf:"bytes,1,opt,name=apt,proto3" json:"apt,omitempty"`
}

func (x *SystemPackage) Reset() {
	*x = SystemPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantr_config_v1_struct_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemPackage) ProtoMessage() {}

func (x *SystemPackage) ProtoReflect() protoreflect.Message {
	mi := &file_plantr_config_v1_struct_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemPackage.ProtoReflect.Descriptor instead.
func (*SystemPackage) Descriptor() ([]byte, []int) {
	return file_plantr_config_v1_struct_proto_rawDescGZIP(), []int{2}
}

func (x *SystemPackage) GetApt() *SystemPackage_Apt {
	if x != nil {
		return x.Apt
	}
	return nil
}

type GitRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// Types that are assignable to Ref:
	//
	//	*GitRepo_Tag
	//	*GitRepo_Commit
	Ref isGitRepo_Ref `protobuf_oneof:"ref"`
}

func (x *GitRepo) Reset() {
	*x = GitRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantr_config_v1_struct_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitRepo) ProtoMessage() {}

func (x *GitRepo) ProtoReflect() protoreflect.Message {
	mi := &file_plantr_config_v1_struct_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitRepo.ProtoReflect.Descriptor instead.
func (*GitRepo) Descriptor() ([]byte, []int) {
	return file_plantr_config_v1_struct_proto_rawDescGZIP(), []int{3}
}

func (x *GitRepo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitRepo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (m *GitRepo) GetRef() isGitRepo_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *GitRepo) GetTag() string {
	if x, ok := x.GetRef().(*GitRepo_Tag); ok {
		return x.Tag
	}
	return ""
}

func (x *GitRepo) GetCommit() string {
	if x, ok := x.GetRef().(*GitRepo_Commit); ok {
		return x.Commit
	}
	return ""
}

type isGitRepo_Ref interface {
	isGitRepo_Ref()
}

type GitRepo_Tag struct {
	Tag string `protobuf:"bytes,3,opt,name=tag,proto3,oneof"`
}

type GitRepo_Commit struct {
	Commit string `protobuf:"bytes,4,opt,name=commit,proto3,oneof"`
}

func (*GitRepo_Tag) isGitRepo_Ref() {}

func (*GitRepo_Commit) isGitRepo_Ref() {}

type Golang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Golang) Reset() {
	*x = Golang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantr_config_v1_struct_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Golang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Golang) ProtoMessage() {}

func (x *Golang) ProtoReflect() protoreflect.Message {
	mi := &file_plantr_config_v1_struct_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Golang.ProtoReflect.Descriptor instead.
func (*Golang) Descriptor() ([]byte, []int) {
	return file_plantr_config_v1_struct_proto_rawDescGZIP(), []int{4}
}

func (x *Golang) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Seed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Element:
	//
	//	*Seed_ConfigFile
	//	*Seed_GithubRelease
	//	*Seed_SystemPackage
	//	*Seed_GitRepo
	//	*Seed_Golang
	Element isSeed_Element `protobuf_oneof:"element"`
}

func (x *Seed) Reset() {
	*x = Seed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantr_config_v1_struct_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Seed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seed) ProtoMessage() {}

func (x *Seed) ProtoReflect() protoreflect.Message {
	mi := &file_plantr_config_v1_struct_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seed.ProtoReflect.Descriptor instead.
func (*Seed) Descriptor() ([]byte, []int) {
	return file_plantr_config_v1_struct_proto_rawDescGZIP(), []int{5}
}

func (m *Seed) GetElement() isSeed_Element {
	if m != nil {
		return m.Element
	}
	return nil
}

func (x *Seed) GetConfigFile() *ConfigFile {
	if x, ok := x.GetElement().(*Seed_ConfigFile); ok {
		return x.ConfigFile
	}
	return nil
}

func (x *Seed) GetGithubRelease() *GithubRelease {
	if x, ok := x.GetElement().(*Seed_GithubRelease); ok {
		return x.GithubRelease
	}
	return nil
}

func (x *Seed) GetSystemPackage() *SystemPackage {
	if x, ok := x.GetElement().(*Seed_SystemPackage); ok {
		return x.SystemPackage
	}
	return nil
}

func (x *Seed) GetGitRepo() *GitRepo {
	if x, ok := x.GetElement().(*Seed_GitRepo); ok {
		return x.GitRepo
	}
	return nil
}

func (x *Seed) GetGolang() *Golang {
	if x, ok := x.GetElement().(*Seed_Golang); ok {
		return x.Golang
	}
	return nil
}

type isSeed_Element interface {
	isSeed_Element()
}

type Seed_ConfigFile struct {
	ConfigFile *ConfigFile `protobuf:"bytes,1,opt,name=config_file,json=configFile,proto3,oneof"`
}

type Seed_GithubRelease struct {
	GithubRelease *GithubRelease `protobuf:"bytes,2,opt,name=github_release,json=githubRelease,proto3,oneof"`
}

type Seed_SystemPackage struct {
	SystemPackage *SystemPackage `protobuf:"bytes,3,opt,name=system_package,json=systemPackage,proto3,oneof"`
}

type Seed_GitRepo struct {
	GitRepo *GitRepo `protobuf:"bytes,4,opt,name=git_repo,json=gitRepo,proto3,oneof"`
}

type Seed_Golang struct {
	Golang *Golang `protobuf:"bytes,5,opt,name=golang,proto3,oneof"`
}

func (*Seed_ConfigFile) isSeed_Element() {}

func (*Seed_GithubRelease) isSeed_Element() {}

func (*Seed_SystemPackage) isSeed_Element() {}

func (*Seed_GitRepo) isSeed_Element() {}

func (*Seed_Golang) isSeed_Element() {}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seeds []*Seed `protobuf:"bytes,1,rep,name=seeds,proto3" json:"seeds,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantr_config_v1_struct_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_plantr_config_v1_struct_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_plantr_config_v1_struct_proto_rawDescGZIP(), []int{6}
}

func (x *Role) GetSeeds() []*Seed {
	if x != nil {
		return x.Seeds
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hostname       string   `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	PublicKeyB64   string   `protobuf:"bytes,3,opt,name=public_key_b64,json=publicKeyB64,proto3" json:"public_key_b64,omitempty"`
	Roles          []string `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`
	UserHome       string   `protobuf:"bytes,5,opt,name=user_home,json=userHome,proto3" json:"user_home,omitempty"`
	BinDir         string   `protobuf:"bytes,6,opt,name=bin_dir,json=binDir,proto3" json:"bin_dir,omitempty"`
	Os             string   `protobuf:"bytes,7,opt,name=os,proto3" json:"os,omitempty"`
	Arch           string   `protobuf:"bytes,8,opt,name=arch,proto3" json:"arch,omitempty"`
	PackageManager string   `protobuf:"bytes,9,opt,name=package_manager,json=packageManager,proto3" json:"package_manager,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantr_config_v1_struct_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_plantr_config_v1_struct_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_plantr_config_v1_struct_proto_rawDescGZIP(), []int{7}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Node) GetPublicKeyB64() string {
	if x != nil {
		return x.PublicKeyB64
	}
	return ""
}

func (x *Node) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Node) GetUserHome() string {
	if x != nil {
		return x.UserHome
	}
	return ""
}

func (x *Node) GetBinDir() string {
	if x != nil {
		return x.BinDir
	}
	return ""
}

func (x *Node) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Node) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Node) GetPackageManager() string {
	if x != nil {
		return x.PackageManager
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles map[string]*Role `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Nodes []*Node          `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantr_config_v1_struct_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_plantr_config_v1_struct_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_plantr_config_v1_struct_proto_rawDescGZIP(), []int{8}
}

func (x *Config) GetRoles() map[string]*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Config) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type GithubRelease_AssetPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Linux *GithubRelease_AssetPattern_ArchPattern `protobuf:"bytes,1,opt,name=linux,proto3" json:"linux,omitempty"`
	Mac   *GithubRelease_AssetPattern_ArchPattern `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *GithubRelease_AssetPattern) Reset() {
	*x = GithubRelease_AssetPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantr_config_v1_struct_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubRelease_AssetPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRelease_AssetPattern) ProtoMessage() {}

func (x *GithubRelease_AssetPattern) ProtoReflect() protoreflect.Message {
	mi := &file_plantr_config_v1_struct_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRelease_AssetPattern.ProtoReflect.Descriptor instead.
func (*GithubRelease_AssetPattern) Descriptor() ([]byte, []int) {
	return file_plantr_config_v1_struct_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GithubRelease_AssetPattern) GetLinux() *GithubRelease_AssetPattern_ArchPattern {
	if x != nil {
		return x.Linux
	}
	return nil
}

func (x *GithubRelease_AssetPattern) GetMac() *GithubRelease_AssetPattern_ArchPattern {
	if x != nil {
		return x.Mac
	}
	return nil
}

type GithubRelease_AssetPattern_ArchPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amd64 string `protobuf:"bytes,1,opt,name=amd64,proto3" json:"amd64,omitempty"`
	Arm64 string `protobuf:"bytes,2,opt,name=arm64,proto3" json:"arm64,omitempty"`
}

func (x *GithubRelease_AssetPattern_ArchPattern) Reset() {
	*x = GithubRelease_AssetPattern_ArchPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantr_config_v1_struct_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubRelease_AssetPattern_ArchPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRelease_AssetPattern_ArchPattern) ProtoMessage() {}

func (x *GithubRelease_AssetPattern_ArchPattern) ProtoReflect() protoreflect.Message {
	mi := &file_plantr_config_v1_struct_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRelease_AssetPattern_ArchPattern.ProtoReflect.Descriptor instead.
func (*GithubRelease_AssetPattern_ArchPattern) Descriptor() ([]byte, []int) {
	return file_plantr_config_v1_struct_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *GithubRelease_AssetPattern_ArchPattern) GetAmd64() string {
	if x != nil {
		return x.Amd64
	}
	return ""
}

func (x *GithubRelease_AssetPattern_ArchPattern) GetArm64() string {
	if x != nil {
		return x.Arm64
	}
	return ""
}

type SystemPackage_Apt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SystemPackage_Apt) Reset() {
	*x = SystemPackage_Apt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantr_config_v1_struct_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemPackage_Apt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemPackage_Apt) ProtoMessage() {}

func (x *SystemPackage_Apt) ProtoReflect() protoreflect.Message {
	mi := &file_plantr_config_v1_struct_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemPackage_Apt.ProtoReflect.Descriptor instead.
func (*SystemPackage_Apt) Descriptor() ([]byte, []int) {
	return file_plantr_config_v1_struct_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SystemPackage_Apt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_plantr_config_v1_struct_proto protoreflect.FileDescriptor

var file_plantr_config_v1_struct_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6,
	0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x55, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0xba, 0x48, 0x3e,
	0xba, 0x01, 0x3b, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x2e,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x0e,
	0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x71, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xba, 0x48, 0x4c, 0xba, 0x01,
	0x49, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x0e, 0x73, 0x69, 0x7a, 0x65,
	0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x04, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0xba, 0x48, 0x41, 0xba, 0x01, 0x3e, 0x0a,
	0x12, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x12, 0x18, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x0e, 0x73,
	0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x12, 0x53, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0xba, 0x48, 0x3f, 0xba, 0x01, 0x3c, 0x0a, 0x11, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x74, 0x61, 0x67,
	0x12, 0x17, 0x74, 0x61, 0x67, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x0e, 0x73, 0x69, 0x7a, 0x65, 0x28,
	0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x28,
	0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x1a, 0xe5, 0x01, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x4e, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e,
	0x41, 0x72, 0x63, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x12, 0x4a, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x41, 0x72,
	0x63, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x1a, 0x39,
	0x0a, 0x0b, 0x41, 0x72, 0x63, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6d, 0x64, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6d,
	0x64, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x36, 0x34, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x0d,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x03, 0x61, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x52,
	0x03, 0x61, 0x70, 0x74, 0x1a, 0x63, 0x0a, 0x03, 0x41, 0x70, 0x74, 0x12, 0x5c, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0xba, 0x48, 0x45, 0xba, 0x01,
	0x42, 0x0a, 0x16, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x41, 0x70, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x1a, 0x0e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20,
	0x3e, 0x20, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x48, 0xba, 0x48, 0x45, 0x1a, 0x43,
	0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x23, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x5b, 0x27, 0x61, 0x70, 0x74, 0x27, 0x5d, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x1a, 0x0d, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x74, 0x29, 0x22, 0xf9, 0x01, 0x0a, 0x07, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12,
	0x4e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xba, 0x48,
	0x39, 0xba, 0x01, 0x36, 0x0a, 0x0b, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x2e, 0x75, 0x72,
	0x6c, 0x12, 0x17, 0x75, 0x72, 0x6c, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x0e, 0x73, 0x69, 0x7a, 0x65,
	0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x62, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x46, 0xba, 0x48, 0x43, 0xba, 0x01, 0x40, 0x0a, 0x10, 0x47, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x0e, 0x73, 0x69, 0x7a, 0x65, 0x28,
	0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x42, 0x0c, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22,
	0x67, 0x0a, 0x06, 0x47, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xba, 0x48, 0x40, 0xba,
	0x01, 0x3d, 0x0a, 0x0e, 0x47, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a,
	0x0e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x02, 0x0a, 0x04, 0x53, 0x65, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x72, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x72, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x32,
	0x0a, 0x06, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x42, 0x10, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x05, 0xba,
	0x48, 0x02, 0x08, 0x01, 0x22, 0x34, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x73, 0x65, 0x65, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x65, 0x64, 0x52, 0x05, 0x73, 0x65, 0x65, 0x64, 0x73, 0x22, 0xe4, 0x05, 0x0a, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x37, 0xba, 0x48, 0x34, 0xba, 0x01, 0x31, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64,
	0x12, 0x16, 0x69, 0x64, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x0e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74,
	0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4f, 0xba, 0x48, 0x4c, 0xba, 0x01, 0x49, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x36, 0x34, 0x12, 0x22, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x36, 0x34, 0x20, 0x69, 0x73,
	0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x1a, 0x0e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x20,
	0x30, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x36, 0x34, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x6f,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0xba, 0x48, 0x42, 0xba, 0x01, 0x3f,
	0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x12, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a,
	0x0e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x6e,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x44,
	0x69, 0x72, 0x12, 0x6d, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d,
	0xba, 0x48, 0x5a, 0xba, 0x01, 0x57, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x73, 0x12,
	0x2f, 0x6f, 0x73, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x5b, 0x22, 0x6c,
	0x69, 0x6e, 0x75, 0x78, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x22, 0x5d,
	0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x27, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x27, 0x2c, 0x20, 0x27, 0x64, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x27, 0x5d, 0x52, 0x02, 0x6f,
	0x73, 0x12, 0x73, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x5f, 0xba, 0x48, 0x5c, 0xba, 0x01, 0x59, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x30, 0x61, 0x72, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x5b, 0x22, 0x61, 0x6d, 0x64, 0x36, 0x34, 0x22, 0x2c, 0x20, 0x22, 0x61, 0x72, 0x6d,
	0x36, 0x34, 0x22, 0x5d, 0x1a, 0x1a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x27,
	0x61, 0x6d, 0x64, 0x36, 0x34, 0x27, 0x2c, 0x20, 0x27, 0x61, 0x72, 0x6d, 0x36, 0x34, 0x27, 0x5d,
	0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x5f, 0xba, 0x48, 0x5c, 0xba, 0x01, 0x59, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x30,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20,
	0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x5b, 0x22, 0x61, 0x70, 0x74, 0x22, 0x5d,
	0x1a, 0x0f, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x27, 0x61, 0x70, 0x74, 0x27,
	0x5d, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x22, 0xc3, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x72, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x50, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x72, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0xc4, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x42, 0x0b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x69, 0x63, 0x6a,
	0x6f, 0x68, 0x6e, 0x73, 0x6f, 0x6e, 0x31, 0x34, 0x35, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x72,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x50, 0x43, 0x58, 0xaa, 0x02, 0x10, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x72,
	0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x72, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x72, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plantr_config_v1_struct_proto_rawDescOnce sync.Once
	file_plantr_config_v1_struct_proto_rawDescData = file_plantr_config_v1_struct_proto_rawDesc
)

func file_plantr_config_v1_struct_proto_rawDescGZIP() []byte {
	file_plantr_config_v1_struct_proto_rawDescOnce.Do(func() {
		file_plantr_config_v1_struct_proto_rawDescData = protoimpl.X.CompressGZIP(file_plantr_config_v1_struct_proto_rawDescData)
	})
	return file_plantr_config_v1_struct_proto_rawDescData
}

var file_plantr_config_v1_struct_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_plantr_config_v1_struct_proto_goTypes = []any{
	(*ConfigFile)(nil),                 // 0: plantr.config.v1.ConfigFile
	(*GithubRelease)(nil),              // 1: plantr.config.v1.GithubRelease
	(*SystemPackage)(nil),              // 2: plantr.config.v1.SystemPackage
	(*GitRepo)(nil),                    // 3: plantr.config.v1.GitRepo
	(*Golang)(nil),                     // 4: plantr.config.v1.Golang
	(*Seed)(nil),                       // 5: plantr.config.v1.Seed
	(*Role)(nil),                       // 6: plantr.config.v1.Role
	(*Node)(nil),                       // 7: plantr.config.v1.Node
	(*Config)(nil),                     // 8: plantr.config.v1.Config
	(*GithubRelease_AssetPattern)(nil), // 9: plantr.config.v1.GithubRelease.AssetPattern
	(*GithubRelease_AssetPattern_ArchPattern)(nil), // 10: plantr.config.v1.GithubRelease.AssetPattern.ArchPattern
	(*SystemPackage_Apt)(nil),                      // 11: plantr.config.v1.SystemPackage.Apt
	nil,                                            // 12: plantr.config.v1.Config.RolesEntry
}
var file_plantr_config_v1_struct_proto_depIdxs = []int32{
	9,  // 0: plantr.config.v1.GithubRelease.asset_patterns:type_name -> plantr.config.v1.GithubRelease.AssetPattern
	11, // 1: plantr.config.v1.SystemPackage.apt:type_name -> plantr.config.v1.SystemPackage.Apt
	0,  // 2: plantr.config.v1.Seed.config_file:type_name -> plantr.config.v1.ConfigFile
	1,  // 3: plantr.config.v1.Seed.github_release:type_name -> plantr.config.v1.GithubRelease
	2,  // 4: plantr.config.v1.Seed.system_package:type_name -> plantr.config.v1.SystemPackage
	3,  // 5: plantr.config.v1.Seed.git_repo:type_name -> plantr.config.v1.GitRepo
	4,  // 6: plantr.config.v1.Seed.golang:type_name -> plantr.config.v1.Golang
	5,  // 7: plantr.config.v1.Role.seeds:type_name -> plantr.config.v1.Seed
	12, // 8: plantr.config.v1.Config.roles:type_name -> plantr.config.v1.Config.RolesEntry
	7,  // 9: plantr.config.v1.Config.nodes:type_name -> plantr.config.v1.Node
	10, // 10: plantr.config.v1.GithubRelease.AssetPattern.linux:type_name -> plantr.config.v1.GithubRelease.AssetPattern.ArchPattern
	10, // 11: plantr.config.v1.GithubRelease.AssetPattern.mac:type_name -> plantr.config.v1.GithubRelease.AssetPattern.ArchPattern
	6,  // 12: plantr.config.v1.Config.RolesEntry.value:type_name -> plantr.config.v1.Role
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_plantr_config_v1_struct_proto_init() }
func file_plantr_config_v1_struct_proto_init() {
	if File_plantr_config_v1_struct_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plantr_config_v1_struct_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantr_config_v1_struct_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GithubRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantr_config_v1_struct_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SystemPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantr_config_v1_struct_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GitRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantr_config_v1_struct_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Golang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantr_config_v1_struct_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Seed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantr_config_v1_struct_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantr_config_v1_struct_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantr_config_v1_struct_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantr_config_v1_struct_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GithubRelease_AssetPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantr_config_v1_struct_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GithubRelease_AssetPattern_ArchPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantr_config_v1_struct_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SystemPackage_Apt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plantr_config_v1_struct_proto_msgTypes[1].OneofWrappers = []any{}
	file_plantr_config_v1_struct_proto_msgTypes[3].OneofWrappers = []any{
		(*GitRepo_Tag)(nil),
		(*GitRepo_Commit)(nil),
	}
	file_plantr_config_v1_struct_proto_msgTypes[5].OneofWrappers = []any{
		(*Seed_ConfigFile)(nil),
		(*Seed_GithubRelease)(nil),
		(*Seed_SystemPackage)(nil),
		(*Seed_GitRepo)(nil),
		(*Seed_Golang)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plantr_config_v1_struct_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plantr_config_v1_struct_proto_goTypes,
		DependencyIndexes: file_plantr_config_v1_struct_proto_depIdxs,
		MessageInfos:      file_plantr_config_v1_struct_proto_msgTypes,
	}.Build()
	File_plantr_config_v1_struct_proto = out.File
	file_plantr_config_v1_struct_proto_rawDesc = nil
	file_plantr_config_v1_struct_proto_goTypes = nil
	file_plantr_config_v1_struct_proto_depIdxs = nil
}
