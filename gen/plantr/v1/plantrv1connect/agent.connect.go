// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: plantr/v1/agent.proto

package plantrv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nicjohnson145/plantr/gen/plantr/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "plantr.v1.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceSyncProcedure is the fully-qualified name of the AgentService's Sync RPC.
	AgentServiceSyncProcedure = "/plantr.v1.AgentService/Sync"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	agentServiceServiceDescriptor    = v1.File_plantr_v1_agent_proto.Services().ByName("AgentService")
	agentServiceSyncMethodDescriptor = agentServiceServiceDescriptor.Methods().ByName("Sync")
)

// AgentServiceClient is a client for the plantr.v1.AgentService service.
type AgentServiceClient interface {
	Sync(context.Context, *connect.Request[v1.SyncRequest]) (*connect.Response[v1.SyncResponse], error)
}

// NewAgentServiceClient constructs a client for the plantr.v1.AgentService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentServiceClient{
		sync: connect.NewClient[v1.SyncRequest, v1.SyncResponse](
			httpClient,
			baseURL+AgentServiceSyncProcedure,
			connect.WithSchema(agentServiceSyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	sync *connect.Client[v1.SyncRequest, v1.SyncResponse]
}

// Sync calls plantr.v1.AgentService.Sync.
func (c *agentServiceClient) Sync(ctx context.Context, req *connect.Request[v1.SyncRequest]) (*connect.Response[v1.SyncResponse], error) {
	return c.sync.CallUnary(ctx, req)
}

// AgentServiceHandler is an implementation of the plantr.v1.AgentService service.
type AgentServiceHandler interface {
	Sync(context.Context, *connect.Request[v1.SyncRequest]) (*connect.Response[v1.SyncResponse], error)
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceSyncHandler := connect.NewUnaryHandler(
		AgentServiceSyncProcedure,
		svc.Sync,
		connect.WithSchema(agentServiceSyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/plantr.v1.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceSyncProcedure:
			agentServiceSyncHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) Sync(context.Context, *connect.Request[v1.SyncRequest]) (*connect.Response[v1.SyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantr.v1.AgentService.Sync is not implemented"))
}
